<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Roadmap - Project Management Suite</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;
      background: #0d1117;
      color: #c9d1d9;
      padding: 20px;
      line-height: 1.6;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
    }

    header {
      background: #161b22;
      padding: 30px;
      border-radius: 6px;
      margin-bottom: 20px;
      border: 1px solid #30363d;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }

    h1 {
      color: #58a6ff;
      font-size: 24px;
      margin-bottom: 5px;
    }

    .status-badge {
      background: #238636;
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .stats {
      display: flex;
      gap: 20px;
      margin-top: 15px;
      font-size: 14px;
      color: #8b949e;
      width: 100%;
    }

    .stat {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .section {
      background: #161b22;
      padding: 25px;
      border-radius: 6px;
      margin-bottom: 20px;
      border: 1px solid #30363d;
    }

    h2 {
      color: #58a6ff;
      font-size: 18px;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid #30363d;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .current-feature {
      background: linear-gradient(135deg, #1c2128 0%, #22272e 100%);
      padding: 20px;
      border-radius: 6px;
      border-left: 4px solid #58a6ff;
      margin-bottom: 15px;
    }

    .current-feature h3 {
      color: #58a6ff;
      font-size: 18px;
      margin-bottom: 10px;
    }

    .feature-meta {
      display: flex;
      gap: 20px;
      margin-bottom: 15px;
      font-size: 14px;
      color: #8b949e;
      flex-wrap: wrap;
    }

    .feature-meta span {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .progress-bar {
      background: #21262d;
      height: 8px;
      border-radius: 4px;
      margin: 15px 0;
      overflow: hidden;
    }

    .progress-fill {
      background: #58a6ff;
      height: 100%;
      transition: width 0.3s ease;
      border-radius: 4px;
    }

    .feature-value {
      background: #1c2128;
      padding: 12px;
      border-radius: 4px;
      margin: 10px 0;
      font-size: 14px;
      border-left: 3px solid #58a6ff;
    }

    .feature-value strong {
      color: #58a6ff;
    }

    .blocking {
      background: #1c2128;
      padding: 12px;
      border-radius: 4px;
      margin: 10px 0;
      font-size: 14px;
      border-left: 3px solid #f85149;
    }

    .blocking strong {
      color: #f85149;
    }

    .empty-state {
      text-align: center;
      padding: 40px;
      color: #8b949e;
    }

    .empty-state-emoji {
      font-size: 48px;
      margin-bottom: 15px;
    }

    .feature-list {
      margin-top: 15px;
    }

    .feature-category {
      margin-bottom: 25px;
    }

    .feature-category h3 {
      color: #c9d1d9;
      font-size: 16px;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .feature-count {
      background: #21262d;
      color: #8b949e;
      padding: 2px 10px;
      border-radius: 10px;
      font-size: 12px;
      font-weight: 600;
    }

    .feature-item {
      background: #1c2128;
      padding: 14px 16px;
      border-radius: 4px;
      margin-bottom: 8px;
      border-left: 3px solid #30363d;
      transition: all 0.2s;
    }

    .feature-item:hover {
      background: #22272e;
      transform: translateX(2px);
    }

    .feature-item.shipped {
      border-left-color: #3fb950;
      opacity: 0.85;
    }

    .feature-item.in-progress {
      border-left-color: #58a6ff;
      background: #1c2838;
    }

    .feature-item.next-up {
      border-left-color: #d29922;
    }

    .feature-item.backlog {
      border-left-color: #6e7681;
      opacity: 0.7;
    }

    .feature-item .name {
      font-size: 14px;
      color: #c9d1d9;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .feature-item .category {
      font-size: 12px;
      color: #8b949e;
    }

    .feature-item .phase-badge {
      display: inline-block;
      background: #21262d;
      color: #58a6ff;
      padding: 2px 8px;
      border-radius: 3px;
      font-size: 11px;
      font-weight: 600;
      margin-left: 8px;
    }

    .feature-item .value {
      font-size: 13px;
      color: #8b949e;
      margin-top: 6px;
      font-style: italic;
    }

    .priority-queue {
      list-style: none;
    }

    .priority-item {
      background: #1c2128;
      padding: 18px;
      border-radius: 6px;
      margin-bottom: 15px;
      border-left: 4px solid #d29922;
      transition: all 0.2s;
    }

    .priority-item:hover {
      background: #22272e;
      transform: translateX(2px);
    }

    .priority-header {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
    }

    .priority-item .number {
      color: #d29922;
      font-size: 20px;
      font-weight: bold;
      margin-right: 12px;
      min-width: 30px;
    }

    .priority-item .feature-name {
      color: #58a6ff;
      font-size: 16px;
      font-weight: 500;
    }

    .priority-item .reason {
      font-size: 14px;
      color: #c9d1d9;
      margin-bottom: 6px;
      padding-left: 42px;
    }

    .priority-item .blocks {
      font-size: 13px;
      color: #8b949e;
      padding-left: 42px;
    }

    .priority-item .blocks.blocked {
      color: #f85149;
    }

    .actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .btn {
      background: #238636;
      color: white;
      padding: 10px 20px;
      border-radius: 6px;
      text-decoration: none;
      font-size: 14px;
      border: none;
      cursor: pointer;
      transition: all 0.2s;
      display: inline-flex;
      align-items: center;
      gap: 6px;
    }

    .btn:hover {
      background: #2ea043;
      transform: translateY(-1px);
    }

    .btn.secondary {
      background: #21262d;
      color: #c9d1d9;
    }

    .btn.secondary:hover {
      background: #30363d;
    }

    .btn.small {
      padding: 4px 10px;
      font-size: 12px;
      margin-left: 8px;
    }

    .btn.move {
      background: #238636;
      color: white;
    }

    .btn.move:hover {
      background: #2ea043;
    }

    .feature-actions {
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px solid #30363d;
    }

    .draggable {
      cursor: move;
      transition: opacity 0.2s;
    }

    .draggable:hover {
      opacity: 0.8;
    }

    .dragging {
      opacity: 0.5;
    }

    .drop-zone {
      position: relative;
    }

    .drop-zone.drag-over {
      background: rgba(88, 166, 255, 0.1);
      border: 2px dashed #58a6ff;
      border-radius: 6px;
    }

    .drop-hint {
      display: none;
      text-align: center;
      padding: 30px;
      color: #8b949e;
      font-style: italic;
      background: rgba(88, 166, 255, 0.05);
      border: 2px dashed #30363d;
      border-radius: 6px;
      margin-top: 10px;
    }

    .drop-zone.drag-over .drop-hint {
      display: block;
      border-color: #58a6ff;
      color: #58a6ff;
    }

    .update-banner {
      background: #1c2838;
      border: 2px solid #58a6ff;
      padding: 15px;
      border-radius: 6px;
      margin-bottom: 20px;
      display: none;
    }

    .update-banner.show {
      display: block;
    }

    .update-banner h3 {
      color: #58a6ff;
      margin-bottom: 10px;
      font-size: 16px;
    }

    .expand-toggle {
      color: #58a6ff;
      cursor: pointer;
      font-size: 13px;
      margin-top: 8px;
      padding: 8px 12px;
      background: #1c2128;
      border-radius: 4px;
      display: inline-block;
      transition: all 0.2s;
    }

    .expand-toggle:hover {
      background: #22272e;
      text-decoration: underline;
    }

    .hidden {
      display: none;
    }

    .help-text {
      color: #8b949e;
      font-size: 14px;
      margin-bottom: 15px;
      font-style: italic;
    }

    @media (max-width: 768px) {
      body {
        padding: 10px;
      }

      header {
        padding: 20px;
      }

      h1 {
        font-size: 20px;
      }

      .section {
        padding: 20px;
      }

      .stats {
        flex-direction: column;
        gap: 8px;
      }

      .actions {
        width: 100%;
      }

      .btn {
        flex: 1;
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- UPDATE BANNER -->
    <div class="update-banner" id="update-banner">
      <h3>üìÇ Connect File for Auto-Save</h3>
      <p style="margin-bottom: 10px;">Connect to data.js to automatically save changes when you move features:</p>
      <button class="btn" onclick="selectDataFile()">üìÇ Select data.js File</button>
    </div>

    <!-- HEADER -->
    <header>
      <div>
        <h1 id="project-title">üì¶ Product Roadmap</h1>
        <p style="color: #8b949e; font-size: 14px; margin-top: 5px;" id="project-phase">Loading...</p>
        <div class="stats">
          <div class="stat">‚úÖ Shipped: <strong id="stat-shipped">0</strong></div>
          <div class="stat">üèóÔ∏è In Progress: <strong id="stat-progress">0</strong></div>
          <div class="stat">üîú Next Up: <strong id="stat-next">0</strong></div>
          <div class="stat">üìã Backlog: <strong id="stat-backlog">0</strong></div>
        </div>
      </div>
      <div class="status-badge">
        <span id="status-icon">üü¢</span>
        <span id="status-text">Active</span>
      </div>
    </header>

    <!-- 1. CURRENT -->
    <div class="section">
      <h2>üöÄ Current</h2>
      <p class="help-text">What you're building right now</p>
      <div id="current-features"></div>
    </div>

    <!-- 2. ALL FEATURES -->
    <div class="section">
      <h2>üì¶ All Features</h2>
      <p class="help-text">Organized by status, grouped by phase</p>
      <div class="feature-list" id="feature-list">
        <p style="color: #8b949e;">Loading...</p>
      </div>
    </div>

    <!-- 3. PRIORITY QUEUE -->
    <div class="section">
      <h2>‚ö° Priority Queue</h2>
      <p class="help-text">What's next, in order of priority</p>
      <ul class="priority-queue" id="priority-queue">
        <li>Loading...</li>
      </ul>
    </div>

    <!-- 4. QUICK ACTIONS -->
    <div class="section">
      <h2>üé¨ Quick Actions</h2>
      <div class="actions">
        <a class="btn" href="tests.html">
          üß™ Test Status Dashboard
        </a>
        <a class="btn secondary" href="../PROJECT-MANAGEMENT-SUITE-INTEGRATED-IMPLEMENTATION-PLAN-2025-10-21.md" target="_blank">
          üìã Implementation Roadmap
        </a>
        <a class="btn secondary" href="https://github.com/mevans2120/project-analyst-manager-claude-skills" target="_blank">
          üîó GitHub Repository
        </a>
        <a class="btn secondary" href="README.md" target="_blank">
          üìñ Dashboard Usage Guide
        </a>
      </div>
    </div>
  </div>

  <script src="data.js"></script>
  <script>
    // State management
    let currentRoadmap = null;
    let fileHandle = null;
    let hasChanges = false;

    // Check File System Access API support
    const supportsFileSystemAccess = 'showOpenFilePicker' in window;

    // Load roadmap (clone from productRoadmap)
    function loadRoadmap() {
      currentRoadmap = JSON.parse(JSON.stringify(productRoadmap)); // Deep clone
      return currentRoadmap;
    }

    // Select data.js file for auto-saving
    async function selectDataFile() {
      if (!supportsFileSystemAccess) {
        alert('‚ùå File System Access API not supported in this browser. Use Chrome or Edge.');
        return;
      }

      try {
        const [handle] = await window.showOpenFilePicker({
          types: [{
            description: 'JavaScript files',
            accept: { 'text/javascript': ['.js'] }
          }],
          suggestedName: 'data.js'
        });

        fileHandle = handle;
        document.getElementById('update-banner').innerHTML = `
          <h3>‚úÖ File Connected</h3>
          <p style="margin-bottom: 10px;">Auto-saving to: <strong>${handle.name}</strong></p>
          <button class="btn secondary" onclick="disconnectFile()">Disconnect File</button>
        `;
        document.getElementById('update-banner').classList.add('show');

        alert(`‚úÖ Connected to ${handle.name}. Changes will auto-save!`);
      } catch (err) {
        if (err.name !== 'AbortError') {
          console.error('Error selecting file:', err);
          alert('‚ùå Failed to select file');
        }
      }
    }

    // Disconnect file
    function disconnectFile() {
      fileHandle = null;
      document.getElementById('update-banner').classList.remove('show');
      alert('Disconnected from data.js. Changes will not be saved.');
    }

    // Save roadmap to file
    async function saveRoadmap() {
      if (!fileHandle) {
        const shouldConnect = confirm('No file connected. Would you like to connect to data.js for auto-saving?');
        if (shouldConnect) {
          await selectDataFile();
          if (!fileHandle) return; // User cancelled
        } else {
          return;
        }
      }

      try {
        // Prepare data with stats
        const dataToSave = {
          ...currentRoadmap,
          stats: {
            shipped: currentRoadmap.features.shipped.length,
            inProgress: currentRoadmap.features.inProgress.length,
            nextUp: currentRoadmap.features.nextUp.length,
            backlog: currentRoadmap.features.backlog.length,
            total: currentRoadmap.features.shipped.length +
                   currentRoadmap.features.inProgress.length +
                   currentRoadmap.features.nextUp.length +
                   currentRoadmap.features.backlog.length
          }
        };

        const dataStr = `// dashboard/data.js\n// Update this file to reflect current project status\n\nconst productRoadmap = ${JSON.stringify(dataToSave, null, 2)};\n\n// Auto-calculate stats\nproductRoadmap.stats = {\n  shipped: productRoadmap.features.shipped.length,\n  inProgress: productRoadmap.features.inProgress.length,\n  nextUp: productRoadmap.features.nextUp.length,\n  backlog: productRoadmap.features.backlog.length,\n  total: productRoadmap.features.shipped.length +\n         productRoadmap.features.inProgress.length +\n         productRoadmap.features.nextUp.length +\n         productRoadmap.features.backlog.length\n};\n`;

        const writable = await fileHandle.createWritable();
        await writable.write(dataStr);
        await writable.close();

        console.log('‚úÖ Saved to', fileHandle.name);
        hasChanges = false;
      } catch (err) {
        console.error('Error saving file:', err);
        alert('‚ùå Failed to save file. Check browser console for details.');
      }
    }

    // Start all Next Up features
    function startAllNextUp() {
      if (!currentRoadmap.features.nextUp || currentRoadmap.features.nextUp.length === 0) {
        return;
      }

      // Get all features from Next Up
      const featuresToStart = [...currentRoadmap.features.nextUp];

      // Move each feature to inProgress and current
      featuresToStart.forEach(feature => {
        currentRoadmap.features.inProgress.push(feature);
        currentRoadmap.current.push({...feature, progress: 0});
      });

      // Clear Next Up
      currentRoadmap.features.nextUp = [];

      saveRoadmap();
      renderDashboard();
    }

    // Move feature to current
    function moveToCurrent(featureId) {
      const feature = findFeatureInRoadmap(featureId);
      if (!feature) return;

      // Remove from nextUp
      currentRoadmap.features.nextUp = currentRoadmap.features.nextUp.filter(f => f.id !== featureId);

      // Add to inProgress and current
      currentRoadmap.features.inProgress.push(feature);
      currentRoadmap.current.push({...feature, progress: 0});

      saveRoadmap();
      renderDashboard();
    }

    // Move feature to next up
    function moveToNextUp(featureId) {
      const feature = findFeatureInRoadmap(featureId);
      if (!feature) return;

      // Check if dependencies are met
      if (feature.dependencies && feature.dependencies.length > 0) {
        const unmetDeps = feature.dependencies.filter(depId => {
          const dep = findFeatureInRoadmap(depId);
          return !currentRoadmap.features.shipped.some(f => f.id === depId);
        });

        if (unmetDeps.length > 0) {
          alert(`Cannot move to Next Up. Dependencies not met: ${unmetDeps.join(', ')}`);
          return;
        }
      }

      // Remove from backlog
      currentRoadmap.features.backlog = currentRoadmap.features.backlog.filter(f => f.id !== featureId);

      // Add to nextUp
      currentRoadmap.features.nextUp.push(feature);

      saveRoadmap();
      renderDashboard();
    }

    // Find feature in current roadmap
    function findFeatureInRoadmap(id) {
      const all = [
        ...currentRoadmap.features.shipped,
        ...currentRoadmap.features.inProgress,
        ...currentRoadmap.features.nextUp,
        ...currentRoadmap.features.backlog
      ];
      return all.find(f => f.id === id);
    }

    // Drag and Drop handlers
    let draggedFeatureId = null;

    function handleDragStart(event, featureId) {
      draggedFeatureId = featureId;
      event.currentTarget.classList.add('dragging');
      event.dataTransfer.effectAllowed = 'move';
      event.dataTransfer.setData('text/plain', featureId);
    }

    function handleDragEnd(event) {
      event.currentTarget.classList.remove('dragging');
      draggedFeatureId = null;
    }

    function handleDragOver(event) {
      event.preventDefault();
      event.dataTransfer.dropEffect = 'move';
      event.currentTarget.classList.add('drag-over');
    }

    function handleDragLeave(event) {
      // Only remove if leaving the drop zone itself, not child elements
      if (event.currentTarget === event.target || !event.currentTarget.contains(event.relatedTarget)) {
        event.currentTarget.classList.remove('drag-over');
      }
    }

    function handleDrop(event) {
      event.preventDefault();
      event.currentTarget.classList.remove('drag-over');

      if (!draggedFeatureId) return;

      // Move the feature to Next Up (with validation)
      moveToNextUp(draggedFeatureId);
      draggedFeatureId = null;
    }


    // Initialize
    loadRoadmap();

    // Render dashboard
    function renderDashboard() {
      // Recalculate stats
      currentRoadmap.stats = {
        shipped: currentRoadmap.features.shipped.length,
        inProgress: currentRoadmap.features.inProgress.length,
        nextUp: currentRoadmap.features.nextUp.length,
        backlog: currentRoadmap.features.backlog.length
      };

      // Header
      document.getElementById('project-title').textContent =
        `üì¶ ${currentRoadmap.project.name} - Product Roadmap`;
      document.getElementById('project-phase').textContent =
        currentRoadmap.project.phase;

      // Stats
      document.getElementById('stat-shipped').textContent = currentRoadmap.stats.shipped;
      document.getElementById('stat-progress').textContent = currentRoadmap.stats.inProgress;
      document.getElementById('stat-next').textContent = currentRoadmap.stats.nextUp;
      document.getElementById('stat-backlog').textContent = currentRoadmap.stats.backlog;

      // Status badge
      if (currentRoadmap.stats.inProgress > 0) {
        document.getElementById('status-icon').textContent = 'üü¢';
        document.getElementById('status-text').textContent = 'Building';
      } else if (currentRoadmap.stats.shipped > 0) {
        document.getElementById('status-icon').textContent = 'üü°';
        document.getElementById('status-text').textContent = 'Ready to Start';
      } else {
        document.getElementById('status-icon').textContent = '‚ö™';
        document.getElementById('status-text').textContent = 'Planning';
      }

      // Current features
      renderCurrentFeatures();

      // All features
      renderFeatureList();

      // Priority queue
      renderPriorityQueue();
    }

    function renderCurrentFeatures() {
      const currentDiv = document.getElementById('current-features');

      if (currentRoadmap.current.length === 0) {
        currentDiv.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-emoji">üéØ</div>
            <p><strong>Ready to start!</strong></p>
            <p style="margin-top: 10px;">Move a feature from "Next Up" to the current array in data.js</p>
          </div>
        `;
      } else {
        const projectCode = currentRoadmap.project.code || '';

        currentDiv.innerHTML = currentRoadmap.current.map(feature => {
          const deps = feature.dependencies && feature.dependencies.length > 0
            ? feature.dependencies.map(depId => {
                const depFeature = findFeature(depId);
                return depFeature ? `${projectCode}-${depFeature.number}` : depId;
              }).join(', ')
            : null;

          return `
          <div class="current-feature">
            <h3>
              ${feature.number ? `${projectCode}-${feature.number} ` : ''}
              ${feature.name}
            </h3>
            <div class="feature-meta">
              <span>üìÅ ${feature.category}</span>
              ${feature.priority ? `<span>üéØ ${feature.priority}</span>` : ''}
              ${feature.phase ? `<span>üìç ${feature.phase}</span>` : ''}
              ${deps ? `<span style="color: #d29922;">üîó Depends on: ${deps}</span>` : ''}
            </div>
            ${feature.progress !== undefined ? `
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${feature.progress}%"></div>
              </div>
              <p style="color: #8b949e; font-size: 13px; margin-top: 5px;">${feature.progress}% Complete</p>
            ` : ''}
            ${feature.value ? `
              <div class="feature-value">
                <strong>üí° Value:</strong> ${feature.value}
              </div>
            ` : ''}
            ${feature.blockers && feature.blockers.length > 0 ? `
              <div class="blocking">
                <strong>üöß Blockers:</strong> ${feature.blockers.join(', ')}
              </div>
            ` : ''}
            ${feature.notes ? `
              <p style="color: #8b949e; font-size: 14px; margin-top: 10px; font-style: italic;">${feature.notes}</p>
            ` : ''}
          </div>
        `;
        }).join('');
      }
    }

    function renderFeatureList() {
      const featureListDiv = document.getElementById('feature-list');
      const features = currentRoadmap.features;

      let html = '';

      // In Progress
      if (features.inProgress && features.inProgress.length > 0) {
        html += `
          <div class="feature-category">
            <h3>
              üèóÔ∏è In Progress
              <span class="feature-count">${features.inProgress.length}</span>
            </h3>
            ${renderFeaturesGroupedByPhase(features.inProgress, 'in-progress')}
          </div>
        `;
      }

      // Next Up (Drop Zone)
      html += `
        <div class="feature-category drop-zone" id="next-up-drop-zone"
             ondragover="handleDragOver(event)"
             ondragleave="handleDragLeave(event)"
             ondrop="handleDrop(event)">
          <h3 style="display: flex; align-items: center; justify-content: space-between;">
            <span>
              üîú Next Up
              <span class="feature-count">${features.nextUp ? features.nextUp.length : 0}</span>
            </span>
            ${features.nextUp && features.nextUp.length > 0 ? `
              <button class="btn small move" onclick="startAllNextUp()" style="margin: 0;">
                ‚ñ∂Ô∏è Start All (${features.nextUp.length})
              </button>
            ` : ''}
          </h3>
          ${features.nextUp && features.nextUp.length > 0 ? renderFeaturesGroupedByPhase(features.nextUp, 'next-up') : ''}
          <div class="drop-hint">
            üí° Drop backlog features here to move them to Next Up
          </div>
        </div>
      `;

      // Backlog
      if (features.backlog && features.backlog.length > 0) {
        html += `
          <div class="feature-category">
            <h3>
              üìã Backlog
              <span class="feature-count">${features.backlog.length}</span>
            </h3>
            ${renderFeaturesGroupedByPhase(features.backlog, 'backlog')}
          </div>
        `;
      }

      // Shipped
      if (features.shipped && features.shipped.length > 0) {
        html += `
          <div class="feature-category">
            <h3>
              ‚úÖ Shipped
              <span class="feature-count">${features.shipped.length}</span>
            </h3>
            ${renderFeaturesGroupedByPhase(features.shipped.slice(0, 3), 'shipped')}
            ${features.shipped.length > 3 ? `
              <div class="expand-toggle" onclick="toggleExpand('shipped')">
                üìã View all ${features.shipped.length} shipped features...
              </div>
              <div id="shipped-expanded" class="hidden">
                ${renderFeaturesGroupedByPhase(features.shipped.slice(3), 'shipped')}
              </div>
            ` : ''}
          </div>
        `;
      }

      featureListDiv.innerHTML = html;
    }

    function renderFeaturesGroupedByPhase(features, type) {
      // Group by phase
      const phaseOrder = ['Planning', 'Phase 0', 'Phase 1', 'Phase 2', 'Phase 3', 'Integration', 'Future'];
      const byPhase = {};

      features.forEach(f => {
        const phase = f.phase || 'Unknown';
        if (!byPhase[phase]) {
          byPhase[phase] = [];
        }
        byPhase[phase].push(f);
      });

      // Render each phase group
      let html = '';
      phaseOrder.forEach(phase => {
        if (byPhase[phase] && byPhase[phase].length > 0) {
          html += `
            <div style="margin-left: 15px; margin-top: 10px;">
              <h4 style="color: #8b949e; font-size: 13px; margin-bottom: 8px; font-weight: 600;">
                ${getPhaseEmoji(phase)} ${phase}
              </h4>
              ${renderFeatures(byPhase[phase], type)}
            </div>
          `;
        }
      });

      return html;
    }

    function getPhaseEmoji(phase) {
      const emojis = {
        'Planning': 'üìã',
        'Phase 0': 'üîß',
        'Phase 1': 'üìù',
        'Phase 2': 'üîç',
        'Phase 3': 'üì∏',
        'Integration': 'üîó',
        'Future': 'üöÄ'
      };
      return emojis[phase] || 'üì¶';
    }

    function renderFeatures(features, type) {
      const projectCode = currentRoadmap.project.code || '';

      return features.map(f => {
        const deps = f.dependencies && f.dependencies.length > 0
          ? f.dependencies.map(depId => {
              const depFeature = findFeature(depId);
              return depFeature ? `${projectCode}-${depFeature.number}` : depId;
            }).join(', ')
          : null;

        // Determine if draggable
        let draggableAttr = '';
        let dragHandlers = '';

        if (type === 'backlog') {
          draggableAttr = 'draggable="true"';
          dragHandlers = `ondragstart="handleDragStart(event, '${f.id}')" ondragend="handleDragEnd(event)"`;
        }

        return `
          <div class="feature-item ${type} ${type === 'backlog' ? 'draggable' : ''}" ${draggableAttr} ${dragHandlers}>
            <div class="name">
              ${f.number ? `<span style="color: #58a6ff; font-weight: 600;">${projectCode}-${f.number}</span> ` : ''}
              ${f.name}
              ${type === 'backlog' ? '<span style="color: #8b949e; margin-left: 8px; font-size: 12px;">‚úã Drag to Next Up</span>' : ''}
            </div>
            <div class="category">
              ${f.category}${f.priority ? ' | ' + f.priority : ''}
            </div>
            ${deps ? `<div class="category" style="color: #d29922;">Depends on: ${deps}</div>` : ''}
            ${f.value ? `<div class="value">${f.value}</div>` : ''}
            ${f.shippedDate ? `<div class="category">Shipped: ${f.shippedDate}</div>` : ''}
          </div>
        `;
      }).join('');
    }

    function toggleExpand(section) {
      const el = document.getElementById(`${section}-expanded`);
      el.classList.toggle('hidden');

      const toggle = event.target;
      if (el.classList.contains('hidden')) {
        toggle.textContent = toggle.textContent.replace('Hide', 'View all');
      } else {
        toggle.textContent = toggle.textContent.replace('View all', 'Hide');
      }
    }


    function renderPriorityQueue() {
      const queueList = document.getElementById('priority-queue');
      queueList.innerHTML = productRoadmap.priorityQueue.map((item, index) => {
        const feature = findFeature(item.feature);
        return `
          <li class="priority-item">
            <div class="priority-header">
              <span class="number">${index + 1}Ô∏è‚É£</span>
              <span class="feature-name">${feature ? feature.name : item.feature}</span>
            </div>
            <div class="reason">üí≠ ${item.reason}</div>
            ${item.blocking && item.blocking.length > 0 ? `
              <div class="blocks">‚è≠Ô∏è Blocking: ${item.blocking.length} feature(s)</div>
            ` : ''}
            ${item.blockedBy && item.blockedBy.length > 0 ? `
              <div class="blocks blocked">üöß Blocked by: ${item.blockedBy.join(', ')}</div>
            ` : ''}
          </li>
        `;
      }).join('');
    }

    function findFeature(id) {
      const all = [
        ...productRoadmap.features.shipped,
        ...productRoadmap.features.inProgress,
        ...productRoadmap.features.nextUp,
        ...productRoadmap.features.backlog
      ];
      return all.find(f => f.id === id);
    }


    // Render on load
    renderDashboard();
  </script>
</body>
</html>
