/**
 * Report generator for creating daily markdown reports
 */

import * as fs from 'fs';
import * as path from 'path';
import { ReportData, ProcessedTodo, StateFile } from '../types';
import { getStateStats } from '../core/stateTracker';

/**
 * Generate a daily report from processed TODOs
 */
export function generateDailyReport(
  date: string,
  created: ProcessedTodo[],
  failed: ProcessedTodo[],
  skipped: ProcessedTodo[],
  state: StateFile
): ReportData {
  const stats = getStateStats(state, 1); // Last 24 hours

  // Calculate summary
  const byPriority: Record<string, number> = {
    high: 0,
    medium: 0,
    low: 0
  };

  const byType: Record<string, number> = {};

  for (const todo of created) {
    byPriority[todo.priority] = (byPriority[todo.priority] || 0) + 1;
    byType[todo.type] = (byType[todo.type] || 0) + 1;
  }

  return {
    date,
    summary: {
      totalTodosProcessed: created.length + failed.length + skipped.length,
      issuesCreated: created.length,
      issuesFailed: failed.length,
      issuesSkipped: skipped.length,
      byPriority,
      byType
    },
    newIssues: created,
    failedIssues: failed,
    skippedIssues: skipped
  };
}

/**
 * Format report as markdown
 */
export function formatReportAsMarkdown(report: ReportData): string {
  const lines: string[] = [];

  // Header
  lines.push(`# Daily Project Manager Report`);
  lines.push(`**Date:** ${report.date}`);
  lines.push('');

  // Summary section
  lines.push('## Summary');
  lines.push('');
  lines.push(`- **Total TODOs Processed:** ${report.summary.totalTodosProcessed}`);
  lines.push(`- **Issues Created:** ${report.summary.issuesCreated}`);
  lines.push(`- **Issues Failed:** ${report.summary.issuesFailed}`);
  lines.push(`- **Issues Skipped:** ${report.summary.issuesSkipped}`);
  lines.push('');

  // Priority breakdown
  if (report.summary.issuesCreated > 0) {
    lines.push('### By Priority');
    lines.push('');
    lines.push('| Priority | Count |');
    lines.push('|----------|-------|');
    lines.push(`| High     | ${report.summary.byPriority.high || 0} |`);
    lines.push(`| Medium   | ${report.summary.byPriority.medium || 0} |`);
    lines.push(`| Low      | ${report.summary.byPriority.low || 0} |`);
    lines.push('');

    // Type breakdown
    lines.push('### By Type');
    lines.push('');
    lines.push('| Type | Count |');
    lines.push('|------|-------|');

    const sortedTypes = Object.entries(report.summary.byType).sort((a, b) => b[1] - a[1]);
    for (const [type, count] of sortedTypes) {
      lines.push(`| ${type} | ${count} |`);
    }
    lines.push('');
  }

  // New issues section
  if (report.newIssues.length > 0) {
    lines.push('## Issues Created');
    lines.push('');

    for (const issue of report.newIssues) {
      const emoji = getPriorityEmoji(issue.priority);
      lines.push(`### ${emoji} ${issue.content}`);
      lines.push('');
      if (issue.issueUrl) {
        lines.push(`**Issue:** [#${issue.issueNumber}](${issue.issueUrl})`);
      }
      lines.push(`**File:** \`${issue.file}:${issue.line}\``);
      lines.push(`**Type:** ${issue.type}`);
      lines.push(`**Priority:** ${issue.priority}`);
      lines.push('');
    }
  }

  // Failed issues section
  if (report.failedIssues.length > 0) {
    lines.push('## Failed Issues');
    lines.push('');
    lines.push('The following TODOs could not be converted to issues:');
    lines.push('');

    for (const issue of report.failedIssues) {
      lines.push(`- **${issue.content}**`);
      lines.push(`  - File: \`${issue.file}:${issue.line}\``);
      lines.push(`  - Error: ${issue.error || 'Unknown error'}`);
      lines.push('');
    }
  }

  // Skipped issues section
  if (report.skippedIssues.length > 0) {
    lines.push('## Skipped Issues');
    lines.push('');
    lines.push('The following TODOs were skipped (likely duplicates):');
    lines.push('');

    for (const issue of report.skippedIssues) {
      lines.push(`- **${issue.content}**`);
      lines.push(`  - File: \`${issue.file}:${issue.line}\``);
      if (issue.issueUrl) {
        lines.push(`  - Existing Issue: [#${issue.issueNumber}](${issue.issueUrl})`);
      }
      lines.push('');
    }
  }

  // Footer
  lines.push('---');
  lines.push('');
  lines.push('_Generated by Project Manager_');

  return lines.join('\n');
}

/**
 * Save report to file
 */
export function saveReport(
  report: ReportData,
  outputPath: string,
  filename?: string
): string {
  // Ensure output directory exists
  if (!fs.existsSync(outputPath)) {
    fs.mkdirSync(outputPath, { recursive: true });
  }

  // Generate filename if not provided
  const reportFilename = filename || `${report.date}-daily-report.md`;
  const filePath = path.join(outputPath, reportFilename);

  // Format and save report
  const markdown = formatReportAsMarkdown(report);
  fs.writeFileSync(filePath, markdown, 'utf-8');

  return filePath;
}

/**
 * Generate summary report from state
 */
export function generateSummaryReport(state: StateFile, daysBack: number = 7): string {
  const stats = getStateStats(state, daysBack);
  const lines: string[] = [];

  lines.push(`# Project Manager Summary Report`);
  lines.push(`**Period:** Last ${daysBack} days`);
  lines.push(`**Generated:** ${new Date().toISOString()}`);
  lines.push('');

  lines.push('## Overall Statistics');
  lines.push('');
  lines.push(`- **Total TODOs Processed:** ${stats.totalProcessed}`);
  lines.push(`- **Issues Created:** ${stats.totalCreated}`);
  lines.push(`- **Issues Failed:** ${stats.totalFailed}`);
  lines.push(`- **Issues Skipped:** ${stats.totalSkipped}`);
  lines.push('');

  // Priority breakdown
  lines.push('### By Priority');
  lines.push('');
  lines.push('| Priority | Count |');
  lines.push('|----------|-------|');
  lines.push(`| High     | ${stats.byPriority.high || 0} |`);
  lines.push(`| Medium   | ${stats.byPriority.medium || 0} |`);
  lines.push(`| Low      | ${stats.byPriority.low || 0} |`);
  lines.push('');

  // Type breakdown
  lines.push('### By Type');
  lines.push('');
  lines.push('| Type | Count |');
  lines.push('|------|-------|');

  const sortedTypes = Object.entries(stats.byType).sort((a, b) => b[1] - a[1]);
  for (const [type, count] of sortedTypes) {
    lines.push(`| ${type} | ${count} |`);
  }
  lines.push('');

  // Recent activity
  if (stats.recentActivity.length > 0) {
    lines.push('## Recent Activity');
    lines.push('');

    const recentCreated = stats.recentActivity
      .filter(t => t.status === 'created')
      .slice(0, 10);

    if (recentCreated.length > 0) {
      lines.push('### Recently Created Issues');
      lines.push('');
      for (const todo of recentCreated) {
        if (todo.issueUrl) {
          lines.push(`- [#${todo.issueNumber}](${todo.issueUrl}) - ${todo.content}`);
        }
      }
      lines.push('');
    }
  }

  lines.push('---');
  lines.push('');
  lines.push('_Generated by Project Manager_');

  return lines.join('\n');
}

/**
 * Get priority emoji
 */
function getPriorityEmoji(priority: string): string {
  const emojiMap: Record<string, string> = {
    'high': 'ðŸ”´',
    'medium': 'ðŸŸ¡',
    'low': 'ðŸŸ¢'
  };
  return emojiMap[priority] || 'âšª';
}

/**
 * Format date for report filename
 */
export function formatDateForFilename(date?: Date): string {
  const d = date || new Date();
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}
